/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersScholarshiprequest,
    ControllersScholarshiprequestFromJSON,
    ControllersScholarshiprequestToJSON,
    EntScholarshipRequest,
    EntScholarshipRequestFromJSON,
    EntScholarshipRequestToJSON,
    EntScholarshipinformation,
    EntScholarshipinformationFromJSON,
    EntScholarshipinformationToJSON,
    EntScholarshiptype,
    EntScholarshiptypeFromJSON,
    EntScholarshiptypeToJSON,
    EntSemester,
    EntSemesterFromJSON,
    EntSemesterToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateScholarshipinformationRequest {
    playlist: EntScholarshipinformation;
}

export interface CreateScholarshiprequestRequest {
    scholarshiprequest: ControllersScholarshiprequest;
}

export interface CreateScholarshiptypeRequest {
    scholarshiptype: EntScholarshiptype;
}

export interface CreateSemesterRequest {
    semester: EntSemester;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetScholarshipinformationRequest {
    id: number;
}

export interface GetScholarshiptypeRequest {
    id: number;
}

export interface GetSemesterRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListScholarshipinformationRequest {
    limit?: number;
    offset?: number;
}

export interface ListScholarshiprequestRequest {
    limit?: number;
    offset?: number;
}

export interface ListScholarshiptypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListSemesterRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create scholarshipinformation
     * Create scholarshipinformation
     */
    async createScholarshipinformationRaw(requestParameters: CreateScholarshipinformationRequest): Promise<runtime.ApiResponse<EntScholarshipinformation>> {
        if (requestParameters.playlist === null || requestParameters.playlist === undefined) {
            throw new runtime.RequiredError('playlist','Required parameter requestParameters.playlist was null or undefined when calling createScholarshipinformation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/scholarshipinformation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntScholarshipinformationToJSON(requestParameters.playlist),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScholarshipinformationFromJSON(jsonValue));
    }

    /**
     * Create scholarshipinformation
     * Create scholarshipinformation
     */
    async createScholarshipinformation(requestParameters: CreateScholarshipinformationRequest): Promise<EntScholarshipinformation> {
        const response = await this.createScholarshipinformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create scholarshiprequest
     * Create scholarshiprequest
     */
    async createScholarshiprequestRaw(requestParameters: CreateScholarshiprequestRequest): Promise<runtime.ApiResponse<EntScholarshipRequest>> {
        if (requestParameters.scholarshiprequest === null || requestParameters.scholarshiprequest === undefined) {
            throw new runtime.RequiredError('scholarshiprequest','Required parameter requestParameters.scholarshiprequest was null or undefined when calling createScholarshiprequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/scholarshiprequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersScholarshiprequestToJSON(requestParameters.scholarshiprequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScholarshipRequestFromJSON(jsonValue));
    }

    /**
     * Create scholarshiprequest
     * Create scholarshiprequest
     */
    async createScholarshiprequest(requestParameters: CreateScholarshiprequestRequest): Promise<EntScholarshipRequest> {
        const response = await this.createScholarshiprequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create scholarshiptype
     * Create scholarshiptype
     */
    async createScholarshiptypeRaw(requestParameters: CreateScholarshiptypeRequest): Promise<runtime.ApiResponse<EntScholarshiptype>> {
        if (requestParameters.scholarshiptype === null || requestParameters.scholarshiptype === undefined) {
            throw new runtime.RequiredError('scholarshiptype','Required parameter requestParameters.scholarshiptype was null or undefined when calling createScholarshiptype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/scholarshiptype`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntScholarshiptypeToJSON(requestParameters.scholarshiptype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScholarshiptypeFromJSON(jsonValue));
    }

    /**
     * Create scholarshiptype
     * Create scholarshiptype
     */
    async createScholarshiptype(requestParameters: CreateScholarshiptypeRequest): Promise<EntScholarshiptype> {
        const response = await this.createScholarshiptypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create semester
     * Create semester
     */
    async createSemesterRaw(requestParameters: CreateSemesterRequest): Promise<runtime.ApiResponse<EntSemester>> {
        if (requestParameters.semester === null || requestParameters.semester === undefined) {
            throw new runtime.RequiredError('semester','Required parameter requestParameters.semester was null or undefined when calling createSemester.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/resolutions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSemesterToJSON(requestParameters.semester),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSemesterFromJSON(jsonValue));
    }

    /**
     * Create semester
     * Create semester
     */
    async createSemester(requestParameters: CreateSemesterRequest): Promise<EntSemester> {
        const response = await this.createSemesterRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get scholarshipinformation by ID
     * Get a scholarshipinformation entity by ID
     */
    async getScholarshipinformationRaw(requestParameters: GetScholarshipinformationRequest): Promise<runtime.ApiResponse<EntScholarshipinformation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getScholarshipinformation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarshipinformation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScholarshipinformationFromJSON(jsonValue));
    }

    /**
     * get scholarshipinformation by ID
     * Get a scholarshipinformation entity by ID
     */
    async getScholarshipinformation(requestParameters: GetScholarshipinformationRequest): Promise<EntScholarshipinformation> {
        const response = await this.getScholarshipinformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get scholarshiptype by ID
     * Get a scholarshiptype entity by ID
     */
    async getScholarshiptypeRaw(requestParameters: GetScholarshiptypeRequest): Promise<runtime.ApiResponse<EntScholarshiptype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getScholarshiptype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarshiptype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScholarshiptypeFromJSON(jsonValue));
    }

    /**
     * get scholarshiptype by ID
     * Get a scholarshiptype entity by ID
     */
    async getScholarshiptype(requestParameters: GetScholarshiptypeRequest): Promise<EntScholarshiptype> {
        const response = await this.getScholarshiptypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get semester by ID
     * Get a semester entity by ID
     */
    async getSemesterRaw(requestParameters: GetSemesterRequest): Promise<runtime.ApiResponse<EntSemester>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSemester.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/semester/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSemesterFromJSON(jsonValue));
    }

    /**
     * get semester by ID
     * Get a semester entity by ID
     */
    async getSemester(requestParameters: GetSemesterRequest): Promise<EntSemester> {
        const response = await this.getSemesterRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list scholarshipinformation entities
     * List scholarshipinformation entities
     */
    async listScholarshipinformationRaw(requestParameters: ListScholarshipinformationRequest): Promise<runtime.ApiResponse<Array<EntScholarshipinformation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarshipinformation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntScholarshipinformationFromJSON));
    }

    /**
     * list scholarshipinformation entities
     * List scholarshipinformation entities
     */
    async listScholarshipinformation(requestParameters: ListScholarshipinformationRequest): Promise<Array<EntScholarshipinformation>> {
        const response = await this.listScholarshipinformationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list scholarshiprequest entities
     * List scholarshiprequest entities
     */
    async listScholarshiprequestRaw(requestParameters: ListScholarshiprequestRequest): Promise<runtime.ApiResponse<Array<EntScholarshipRequest>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarshiprequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntScholarshipRequestFromJSON));
    }

    /**
     * list scholarshiprequest entities
     * List scholarshiprequest entities
     */
    async listScholarshiprequest(requestParameters: ListScholarshiprequestRequest): Promise<Array<EntScholarshipRequest>> {
        const response = await this.listScholarshiprequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * list scholarshiptype entities
     * List scholarshiptype entities
     */
    async listScholarshiptypeRaw(requestParameters: ListScholarshiptypeRequest): Promise<runtime.ApiResponse<Array<EntScholarshiptype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarshiptype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntScholarshiptypeFromJSON));
    }

    /**
     * list scholarshiptype entities
     * List scholarshiptype entities
     */
    async listScholarshiptype(requestParameters: ListScholarshiptypeRequest): Promise<Array<EntScholarshiptype>> {
        const response = await this.listScholarshiptypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list semester entities
     * List semester entities
     */
    async listSemesterRaw(requestParameters: ListSemesterRequest): Promise<runtime.ApiResponse<Array<EntSemester>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/semester`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSemesterFromJSON));
    }

    /**
     * list semester entities
     * List semester entities
     */
    async listSemester(requestParameters: ListSemesterRequest): Promise<Array<EntSemester>> {
        const response = await this.listSemesterRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
