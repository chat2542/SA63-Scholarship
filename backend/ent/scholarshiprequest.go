// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/chat2542/app/ent/scholarshipinformation"
	"github.com/chat2542/app/ent/scholarshiprequest"
	"github.com/chat2542/app/ent/scholarshiptype"
	"github.com/chat2542/app/ent/semester"
	"github.com/chat2542/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ScholarshipRequest is the model entity for the ScholarshipRequest schema.
type ScholarshipRequest struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScholarshipRequestQuery when eager-loading is set.
	Edges                                      ScholarshipRequestEdges `json:"edges"`
	scholarshipinformation_scholarship_request *int
	scholarshiptype_scholarship_request        *int
	semester_scholarship_request               *int
	user_scholarship_request                   *int
}

// ScholarshipRequestEdges holds the relations/edges for other nodes in the graph.
type ScholarshipRequestEdges struct {
	// User holds the value of the User edge.
	User *User
	// Scholarshiptype holds the value of the Scholarshiptype edge.
	Scholarshiptype *Scholarshiptype
	// Scholarshipinformation holds the value of the Scholarshipinformation edge.
	Scholarshipinformation *Scholarshipinformation
	// Semester holds the value of the Semester edge.
	Semester *Semester
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipRequestEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge User was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "User"}
}

// ScholarshiptypeOrErr returns the Scholarshiptype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipRequestEdges) ScholarshiptypeOrErr() (*Scholarshiptype, error) {
	if e.loadedTypes[1] {
		if e.Scholarshiptype == nil {
			// The edge Scholarshiptype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: scholarshiptype.Label}
		}
		return e.Scholarshiptype, nil
	}
	return nil, &NotLoadedError{edge: "Scholarshiptype"}
}

// ScholarshipinformationOrErr returns the Scholarshipinformation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipRequestEdges) ScholarshipinformationOrErr() (*Scholarshipinformation, error) {
	if e.loadedTypes[2] {
		if e.Scholarshipinformation == nil {
			// The edge Scholarshipinformation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: scholarshipinformation.Label}
		}
		return e.Scholarshipinformation, nil
	}
	return nil, &NotLoadedError{edge: "Scholarshipinformation"}
}

// SemesterOrErr returns the Semester value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipRequestEdges) SemesterOrErr() (*Semester, error) {
	if e.loadedTypes[3] {
		if e.Semester == nil {
			// The edge Semester was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: semester.Label}
		}
		return e.Semester, nil
	}
	return nil, &NotLoadedError{edge: "Semester"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScholarshipRequest) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ScholarshipRequest) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // scholarshipinformation_scholarship_request
		&sql.NullInt64{}, // scholarshiptype_scholarship_request
		&sql.NullInt64{}, // semester_scholarship_request
		&sql.NullInt64{}, // user_scholarship_request
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScholarshipRequest fields.
func (sr *ScholarshipRequest) assignValues(values ...interface{}) error {
	if m, n := len(values), len(scholarshiprequest.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	sr.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(scholarshiprequest.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field scholarshipinformation_scholarship_request", value)
		} else if value.Valid {
			sr.scholarshipinformation_scholarship_request = new(int)
			*sr.scholarshipinformation_scholarship_request = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field scholarshiptype_scholarship_request", value)
		} else if value.Valid {
			sr.scholarshiptype_scholarship_request = new(int)
			*sr.scholarshiptype_scholarship_request = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field semester_scholarship_request", value)
		} else if value.Valid {
			sr.semester_scholarship_request = new(int)
			*sr.semester_scholarship_request = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_scholarship_request", value)
		} else if value.Valid {
			sr.user_scholarship_request = new(int)
			*sr.user_scholarship_request = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the User edge of the ScholarshipRequest.
func (sr *ScholarshipRequest) QueryUser() *UserQuery {
	return (&ScholarshipRequestClient{config: sr.config}).QueryUser(sr)
}

// QueryScholarshiptype queries the Scholarshiptype edge of the ScholarshipRequest.
func (sr *ScholarshipRequest) QueryScholarshiptype() *ScholarshiptypeQuery {
	return (&ScholarshipRequestClient{config: sr.config}).QueryScholarshiptype(sr)
}

// QueryScholarshipinformation queries the Scholarshipinformation edge of the ScholarshipRequest.
func (sr *ScholarshipRequest) QueryScholarshipinformation() *ScholarshipinformationQuery {
	return (&ScholarshipRequestClient{config: sr.config}).QueryScholarshipinformation(sr)
}

// QuerySemester queries the Semester edge of the ScholarshipRequest.
func (sr *ScholarshipRequest) QuerySemester() *SemesterQuery {
	return (&ScholarshipRequestClient{config: sr.config}).QuerySemester(sr)
}

// Update returns a builder for updating this ScholarshipRequest.
// Note that, you need to call ScholarshipRequest.Unwrap() before calling this method, if this ScholarshipRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *ScholarshipRequest) Update() *ScholarshipRequestUpdateOne {
	return (&ScholarshipRequestClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (sr *ScholarshipRequest) Unwrap() *ScholarshipRequest {
	tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScholarshipRequest is not a transactional entity")
	}
	sr.config.driver = tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *ScholarshipRequest) String() string {
	var builder strings.Builder
	builder.WriteString("ScholarshipRequest(")
	builder.WriteString(fmt.Sprintf("id=%v", sr.ID))
	builder.WriteByte(')')
	return builder.String()
}

// ScholarshipRequests is a parsable slice of ScholarshipRequest.
type ScholarshipRequests []*ScholarshipRequest

func (sr ScholarshipRequests) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
