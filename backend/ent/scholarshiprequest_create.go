// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/chat2542/app/ent/scholarshipinformation"
	"github.com/chat2542/app/ent/scholarshiprequest"
	"github.com/chat2542/app/ent/scholarshiptype"
	"github.com/chat2542/app/ent/semester"
	"github.com/chat2542/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ScholarshipRequestCreate is the builder for creating a ScholarshipRequest entity.
type ScholarshipRequestCreate struct {
	config
	mutation *ScholarshipRequestMutation
	hooks    []Hook
}

// SetUserID sets the User edge to User by id.
func (src *ScholarshipRequestCreate) SetUserID(id int) *ScholarshipRequestCreate {
	src.mutation.SetUserID(id)
	return src
}

// SetNillableUserID sets the User edge to User by id if the given value is not nil.
func (src *ScholarshipRequestCreate) SetNillableUserID(id *int) *ScholarshipRequestCreate {
	if id != nil {
		src = src.SetUserID(*id)
	}
	return src
}

// SetUser sets the User edge to User.
func (src *ScholarshipRequestCreate) SetUser(u *User) *ScholarshipRequestCreate {
	return src.SetUserID(u.ID)
}

// SetScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id.
func (src *ScholarshipRequestCreate) SetScholarshiptypeID(id int) *ScholarshipRequestCreate {
	src.mutation.SetScholarshiptypeID(id)
	return src
}

// SetNillableScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id if the given value is not nil.
func (src *ScholarshipRequestCreate) SetNillableScholarshiptypeID(id *int) *ScholarshipRequestCreate {
	if id != nil {
		src = src.SetScholarshiptypeID(*id)
	}
	return src
}

// SetScholarshiptype sets the Scholarshiptype edge to Scholarshiptype.
func (src *ScholarshipRequestCreate) SetScholarshiptype(s *Scholarshiptype) *ScholarshipRequestCreate {
	return src.SetScholarshiptypeID(s.ID)
}

// SetScholarshipinformationID sets the Scholarshipinformation edge to Scholarshipinformation by id.
func (src *ScholarshipRequestCreate) SetScholarshipinformationID(id int) *ScholarshipRequestCreate {
	src.mutation.SetScholarshipinformationID(id)
	return src
}

// SetNillableScholarshipinformationID sets the Scholarshipinformation edge to Scholarshipinformation by id if the given value is not nil.
func (src *ScholarshipRequestCreate) SetNillableScholarshipinformationID(id *int) *ScholarshipRequestCreate {
	if id != nil {
		src = src.SetScholarshipinformationID(*id)
	}
	return src
}

// SetScholarshipinformation sets the Scholarshipinformation edge to Scholarshipinformation.
func (src *ScholarshipRequestCreate) SetScholarshipinformation(s *Scholarshipinformation) *ScholarshipRequestCreate {
	return src.SetScholarshipinformationID(s.ID)
}

// SetSemesterID sets the Semester edge to Semester by id.
func (src *ScholarshipRequestCreate) SetSemesterID(id int) *ScholarshipRequestCreate {
	src.mutation.SetSemesterID(id)
	return src
}

// SetNillableSemesterID sets the Semester edge to Semester by id if the given value is not nil.
func (src *ScholarshipRequestCreate) SetNillableSemesterID(id *int) *ScholarshipRequestCreate {
	if id != nil {
		src = src.SetSemesterID(*id)
	}
	return src
}

// SetSemester sets the Semester edge to Semester.
func (src *ScholarshipRequestCreate) SetSemester(s *Semester) *ScholarshipRequestCreate {
	return src.SetSemesterID(s.ID)
}

// Mutation returns the ScholarshipRequestMutation object of the builder.
func (src *ScholarshipRequestCreate) Mutation() *ScholarshipRequestMutation {
	return src.mutation
}

// Save creates the ScholarshipRequest in the database.
func (src *ScholarshipRequestCreate) Save(ctx context.Context) (*ScholarshipRequest, error) {
	var (
		err  error
		node *ScholarshipRequest
	)
	if len(src.hooks) == 0 {
		node, err = src.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			src.mutation = mutation
			node, err = src.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(src.hooks) - 1; i >= 0; i-- {
			mut = src.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, src.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (src *ScholarshipRequestCreate) SaveX(ctx context.Context) *ScholarshipRequest {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (src *ScholarshipRequestCreate) sqlSave(ctx context.Context) (*ScholarshipRequest, error) {
	sr, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	sr.ID = int(id)
	return sr, nil
}

func (src *ScholarshipRequestCreate) createSpec() (*ScholarshipRequest, *sqlgraph.CreateSpec) {
	var (
		sr    = &ScholarshipRequest{config: src.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scholarshiprequest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarshiprequest.FieldID,
			},
		}
	)
	if nodes := src.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.UserTable,
			Columns: []string{scholarshiprequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ScholarshiptypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshiptypeTable,
			Columns: []string{scholarshiprequest.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ScholarshipinformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshipinformationTable,
			Columns: []string{scholarshiprequest.ScholarshipinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshipinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.SemesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.SemesterTable,
			Columns: []string{scholarshiprequest.SemesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return sr, _spec
}
