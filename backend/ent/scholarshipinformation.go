// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/chat2542/app/ent/scholarshipinformation"
	"github.com/chat2542/app/ent/scholarshiptype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Scholarshipinformation is the model entity for the Scholarshipinformation schema.
type Scholarshipinformation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ScholarshipName holds the value of the "Scholarship_name" field.
	ScholarshipName string `json:"Scholarship_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScholarshipinformationQuery when eager-loading is set.
	Edges                                  ScholarshipinformationEdges `json:"edges"`
	scholarshiptype_scholarshipinformation *int
}

// ScholarshipinformationEdges holds the relations/edges for other nodes in the graph.
type ScholarshipinformationEdges struct {
	// Scholarshiptype holds the value of the Scholarshiptype edge.
	Scholarshiptype *Scholarshiptype
	// ScholarshipRequest holds the value of the ScholarshipRequest edge.
	ScholarshipRequest []*ScholarshipRequest
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ScholarshiptypeOrErr returns the Scholarshiptype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipinformationEdges) ScholarshiptypeOrErr() (*Scholarshiptype, error) {
	if e.loadedTypes[0] {
		if e.Scholarshiptype == nil {
			// The edge Scholarshiptype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: scholarshiptype.Label}
		}
		return e.Scholarshiptype, nil
	}
	return nil, &NotLoadedError{edge: "Scholarshiptype"}
}

// ScholarshipRequestOrErr returns the ScholarshipRequest value or an error if the edge
// was not loaded in eager-loading.
func (e ScholarshipinformationEdges) ScholarshipRequestOrErr() ([]*ScholarshipRequest, error) {
	if e.loadedTypes[1] {
		return e.ScholarshipRequest, nil
	}
	return nil, &NotLoadedError{edge: "ScholarshipRequest"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scholarshipinformation) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Scholarship_name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Scholarshipinformation) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // scholarshiptype_scholarshipinformation
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scholarshipinformation fields.
func (s *Scholarshipinformation) assignValues(values ...interface{}) error {
	if m, n := len(values), len(scholarshipinformation.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Scholarship_name", values[0])
	} else if value.Valid {
		s.ScholarshipName = value.String
	}
	values = values[1:]
	if len(values) == len(scholarshipinformation.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field scholarshiptype_scholarshipinformation", value)
		} else if value.Valid {
			s.scholarshiptype_scholarshipinformation = new(int)
			*s.scholarshiptype_scholarshipinformation = int(value.Int64)
		}
	}
	return nil
}

// QueryScholarshiptype queries the Scholarshiptype edge of the Scholarshipinformation.
func (s *Scholarshipinformation) QueryScholarshiptype() *ScholarshiptypeQuery {
	return (&ScholarshipinformationClient{config: s.config}).QueryScholarshiptype(s)
}

// QueryScholarshipRequest queries the ScholarshipRequest edge of the Scholarshipinformation.
func (s *Scholarshipinformation) QueryScholarshipRequest() *ScholarshipRequestQuery {
	return (&ScholarshipinformationClient{config: s.config}).QueryScholarshipRequest(s)
}

// Update returns a builder for updating this Scholarshipinformation.
// Note that, you need to call Scholarshipinformation.Unwrap() before calling this method, if this Scholarshipinformation
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scholarshipinformation) Update() *ScholarshipinformationUpdateOne {
	return (&ScholarshipinformationClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Scholarshipinformation) Unwrap() *Scholarshipinformation {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scholarshipinformation is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scholarshipinformation) String() string {
	var builder strings.Builder
	builder.WriteString("Scholarshipinformation(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", Scholarship_name=")
	builder.WriteString(s.ScholarshipName)
	builder.WriteByte(')')
	return builder.String()
}

// Scholarshipinformations is a parsable slice of Scholarshipinformation.
type Scholarshipinformations []*Scholarshipinformation

func (s Scholarshipinformations) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
