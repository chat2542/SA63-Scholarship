// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/chat2542/app/ent/migrate"

	"github.com/chat2542/app/ent/scholarshipinformation"
	"github.com/chat2542/app/ent/scholarshiprequest"
	"github.com/chat2542/app/ent/scholarshiptype"
	"github.com/chat2542/app/ent/semester"
	"github.com/chat2542/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ScholarshipRequest is the client for interacting with the ScholarshipRequest builders.
	ScholarshipRequest *ScholarshipRequestClient
	// Scholarshipinformation is the client for interacting with the Scholarshipinformation builders.
	Scholarshipinformation *ScholarshipinformationClient
	// Scholarshiptype is the client for interacting with the Scholarshiptype builders.
	Scholarshiptype *ScholarshiptypeClient
	// Semester is the client for interacting with the Semester builders.
	Semester *SemesterClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ScholarshipRequest = NewScholarshipRequestClient(c.config)
	c.Scholarshipinformation = NewScholarshipinformationClient(c.config)
	c.Scholarshiptype = NewScholarshiptypeClient(c.config)
	c.Semester = NewSemesterClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		ScholarshipRequest:     NewScholarshipRequestClient(cfg),
		Scholarshipinformation: NewScholarshipinformationClient(cfg),
		Scholarshiptype:        NewScholarshiptypeClient(cfg),
		Semester:               NewSemesterClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:                 cfg,
		ScholarshipRequest:     NewScholarshipRequestClient(cfg),
		Scholarshipinformation: NewScholarshipinformationClient(cfg),
		Scholarshiptype:        NewScholarshiptypeClient(cfg),
		Semester:               NewSemesterClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ScholarshipRequest.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ScholarshipRequest.Use(hooks...)
	c.Scholarshipinformation.Use(hooks...)
	c.Scholarshiptype.Use(hooks...)
	c.Semester.Use(hooks...)
	c.User.Use(hooks...)
}

// ScholarshipRequestClient is a client for the ScholarshipRequest schema.
type ScholarshipRequestClient struct {
	config
}

// NewScholarshipRequestClient returns a client for the ScholarshipRequest from the given config.
func NewScholarshipRequestClient(c config) *ScholarshipRequestClient {
	return &ScholarshipRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scholarshiprequest.Hooks(f(g(h())))`.
func (c *ScholarshipRequestClient) Use(hooks ...Hook) {
	c.hooks.ScholarshipRequest = append(c.hooks.ScholarshipRequest, hooks...)
}

// Create returns a create builder for ScholarshipRequest.
func (c *ScholarshipRequestClient) Create() *ScholarshipRequestCreate {
	mutation := newScholarshipRequestMutation(c.config, OpCreate)
	return &ScholarshipRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for ScholarshipRequest.
func (c *ScholarshipRequestClient) Update() *ScholarshipRequestUpdate {
	mutation := newScholarshipRequestMutation(c.config, OpUpdate)
	return &ScholarshipRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScholarshipRequestClient) UpdateOne(sr *ScholarshipRequest) *ScholarshipRequestUpdateOne {
	mutation := newScholarshipRequestMutation(c.config, OpUpdateOne, withScholarshipRequest(sr))
	return &ScholarshipRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScholarshipRequestClient) UpdateOneID(id int) *ScholarshipRequestUpdateOne {
	mutation := newScholarshipRequestMutation(c.config, OpUpdateOne, withScholarshipRequestID(id))
	return &ScholarshipRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScholarshipRequest.
func (c *ScholarshipRequestClient) Delete() *ScholarshipRequestDelete {
	mutation := newScholarshipRequestMutation(c.config, OpDelete)
	return &ScholarshipRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScholarshipRequestClient) DeleteOne(sr *ScholarshipRequest) *ScholarshipRequestDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScholarshipRequestClient) DeleteOneID(id int) *ScholarshipRequestDeleteOne {
	builder := c.Delete().Where(scholarshiprequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScholarshipRequestDeleteOne{builder}
}

// Create returns a query builder for ScholarshipRequest.
func (c *ScholarshipRequestClient) Query() *ScholarshipRequestQuery {
	return &ScholarshipRequestQuery{config: c.config}
}

// Get returns a ScholarshipRequest entity by its id.
func (c *ScholarshipRequestClient) Get(ctx context.Context, id int) (*ScholarshipRequest, error) {
	return c.Query().Where(scholarshiprequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScholarshipRequestClient) GetX(ctx context.Context, id int) *ScholarshipRequest {
	sr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return sr
}

// QueryUser queries the User edge of a ScholarshipRequest.
func (c *ScholarshipRequestClient) QueryUser(sr *ScholarshipRequest) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshiprequest.Table, scholarshiprequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarshiprequest.UserTable, scholarshiprequest.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScholarshiptype queries the Scholarshiptype edge of a ScholarshipRequest.
func (c *ScholarshipRequestClient) QueryScholarshiptype(sr *ScholarshipRequest) *ScholarshiptypeQuery {
	query := &ScholarshiptypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshiprequest.Table, scholarshiprequest.FieldID, id),
			sqlgraph.To(scholarshiptype.Table, scholarshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarshiprequest.ScholarshiptypeTable, scholarshiprequest.ScholarshiptypeColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScholarshipinformation queries the Scholarshipinformation edge of a ScholarshipRequest.
func (c *ScholarshipRequestClient) QueryScholarshipinformation(sr *ScholarshipRequest) *ScholarshipinformationQuery {
	query := &ScholarshipinformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshiprequest.Table, scholarshiprequest.FieldID, id),
			sqlgraph.To(scholarshipinformation.Table, scholarshipinformation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarshiprequest.ScholarshipinformationTable, scholarshiprequest.ScholarshipinformationColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySemester queries the Semester edge of a ScholarshipRequest.
func (c *ScholarshipRequestClient) QuerySemester(sr *ScholarshipRequest) *SemesterQuery {
	query := &SemesterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshiprequest.Table, scholarshiprequest.FieldID, id),
			sqlgraph.To(semester.Table, semester.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarshiprequest.SemesterTable, scholarshiprequest.SemesterColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScholarshipRequestClient) Hooks() []Hook {
	return c.hooks.ScholarshipRequest
}

// ScholarshipinformationClient is a client for the Scholarshipinformation schema.
type ScholarshipinformationClient struct {
	config
}

// NewScholarshipinformationClient returns a client for the Scholarshipinformation from the given config.
func NewScholarshipinformationClient(c config) *ScholarshipinformationClient {
	return &ScholarshipinformationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scholarshipinformation.Hooks(f(g(h())))`.
func (c *ScholarshipinformationClient) Use(hooks ...Hook) {
	c.hooks.Scholarshipinformation = append(c.hooks.Scholarshipinformation, hooks...)
}

// Create returns a create builder for Scholarshipinformation.
func (c *ScholarshipinformationClient) Create() *ScholarshipinformationCreate {
	mutation := newScholarshipinformationMutation(c.config, OpCreate)
	return &ScholarshipinformationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Scholarshipinformation.
func (c *ScholarshipinformationClient) Update() *ScholarshipinformationUpdate {
	mutation := newScholarshipinformationMutation(c.config, OpUpdate)
	return &ScholarshipinformationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScholarshipinformationClient) UpdateOne(s *Scholarshipinformation) *ScholarshipinformationUpdateOne {
	mutation := newScholarshipinformationMutation(c.config, OpUpdateOne, withScholarshipinformation(s))
	return &ScholarshipinformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScholarshipinformationClient) UpdateOneID(id int) *ScholarshipinformationUpdateOne {
	mutation := newScholarshipinformationMutation(c.config, OpUpdateOne, withScholarshipinformationID(id))
	return &ScholarshipinformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scholarshipinformation.
func (c *ScholarshipinformationClient) Delete() *ScholarshipinformationDelete {
	mutation := newScholarshipinformationMutation(c.config, OpDelete)
	return &ScholarshipinformationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScholarshipinformationClient) DeleteOne(s *Scholarshipinformation) *ScholarshipinformationDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScholarshipinformationClient) DeleteOneID(id int) *ScholarshipinformationDeleteOne {
	builder := c.Delete().Where(scholarshipinformation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScholarshipinformationDeleteOne{builder}
}

// Create returns a query builder for Scholarshipinformation.
func (c *ScholarshipinformationClient) Query() *ScholarshipinformationQuery {
	return &ScholarshipinformationQuery{config: c.config}
}

// Get returns a Scholarshipinformation entity by its id.
func (c *ScholarshipinformationClient) Get(ctx context.Context, id int) (*Scholarshipinformation, error) {
	return c.Query().Where(scholarshipinformation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScholarshipinformationClient) GetX(ctx context.Context, id int) *Scholarshipinformation {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryScholarshiptype queries the Scholarshiptype edge of a Scholarshipinformation.
func (c *ScholarshipinformationClient) QueryScholarshiptype(s *Scholarshipinformation) *ScholarshiptypeQuery {
	query := &ScholarshiptypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshipinformation.Table, scholarshipinformation.FieldID, id),
			sqlgraph.To(scholarshiptype.Table, scholarshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarshipinformation.ScholarshiptypeTable, scholarshipinformation.ScholarshiptypeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScholarshipRequest queries the ScholarshipRequest edge of a Scholarshipinformation.
func (c *ScholarshipinformationClient) QueryScholarshipRequest(s *Scholarshipinformation) *ScholarshipRequestQuery {
	query := &ScholarshipRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshipinformation.Table, scholarshipinformation.FieldID, id),
			sqlgraph.To(scholarshiprequest.Table, scholarshiprequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scholarshipinformation.ScholarshipRequestTable, scholarshipinformation.ScholarshipRequestColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScholarshipinformationClient) Hooks() []Hook {
	return c.hooks.Scholarshipinformation
}

// ScholarshiptypeClient is a client for the Scholarshiptype schema.
type ScholarshiptypeClient struct {
	config
}

// NewScholarshiptypeClient returns a client for the Scholarshiptype from the given config.
func NewScholarshiptypeClient(c config) *ScholarshiptypeClient {
	return &ScholarshiptypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scholarshiptype.Hooks(f(g(h())))`.
func (c *ScholarshiptypeClient) Use(hooks ...Hook) {
	c.hooks.Scholarshiptype = append(c.hooks.Scholarshiptype, hooks...)
}

// Create returns a create builder for Scholarshiptype.
func (c *ScholarshiptypeClient) Create() *ScholarshiptypeCreate {
	mutation := newScholarshiptypeMutation(c.config, OpCreate)
	return &ScholarshiptypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Scholarshiptype.
func (c *ScholarshiptypeClient) Update() *ScholarshiptypeUpdate {
	mutation := newScholarshiptypeMutation(c.config, OpUpdate)
	return &ScholarshiptypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScholarshiptypeClient) UpdateOne(s *Scholarshiptype) *ScholarshiptypeUpdateOne {
	mutation := newScholarshiptypeMutation(c.config, OpUpdateOne, withScholarshiptype(s))
	return &ScholarshiptypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScholarshiptypeClient) UpdateOneID(id int) *ScholarshiptypeUpdateOne {
	mutation := newScholarshiptypeMutation(c.config, OpUpdateOne, withScholarshiptypeID(id))
	return &ScholarshiptypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scholarshiptype.
func (c *ScholarshiptypeClient) Delete() *ScholarshiptypeDelete {
	mutation := newScholarshiptypeMutation(c.config, OpDelete)
	return &ScholarshiptypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScholarshiptypeClient) DeleteOne(s *Scholarshiptype) *ScholarshiptypeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScholarshiptypeClient) DeleteOneID(id int) *ScholarshiptypeDeleteOne {
	builder := c.Delete().Where(scholarshiptype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScholarshiptypeDeleteOne{builder}
}

// Create returns a query builder for Scholarshiptype.
func (c *ScholarshiptypeClient) Query() *ScholarshiptypeQuery {
	return &ScholarshiptypeQuery{config: c.config}
}

// Get returns a Scholarshiptype entity by its id.
func (c *ScholarshiptypeClient) Get(ctx context.Context, id int) (*Scholarshiptype, error) {
	return c.Query().Where(scholarshiptype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScholarshiptypeClient) GetX(ctx context.Context, id int) *Scholarshiptype {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryScholarshipinformation queries the Scholarshipinformation edge of a Scholarshiptype.
func (c *ScholarshiptypeClient) QueryScholarshipinformation(s *Scholarshiptype) *ScholarshipinformationQuery {
	query := &ScholarshipinformationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshiptype.Table, scholarshiptype.FieldID, id),
			sqlgraph.To(scholarshipinformation.Table, scholarshipinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scholarshiptype.ScholarshipinformationTable, scholarshiptype.ScholarshipinformationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScholarshipRequest queries the ScholarshipRequest edge of a Scholarshiptype.
func (c *ScholarshiptypeClient) QueryScholarshipRequest(s *Scholarshiptype) *ScholarshipRequestQuery {
	query := &ScholarshipRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshiptype.Table, scholarshiptype.FieldID, id),
			sqlgraph.To(scholarshiprequest.Table, scholarshiprequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scholarshiptype.ScholarshipRequestTable, scholarshiptype.ScholarshipRequestColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScholarshiptypeClient) Hooks() []Hook {
	return c.hooks.Scholarshiptype
}

// SemesterClient is a client for the Semester schema.
type SemesterClient struct {
	config
}

// NewSemesterClient returns a client for the Semester from the given config.
func NewSemesterClient(c config) *SemesterClient {
	return &SemesterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `semester.Hooks(f(g(h())))`.
func (c *SemesterClient) Use(hooks ...Hook) {
	c.hooks.Semester = append(c.hooks.Semester, hooks...)
}

// Create returns a create builder for Semester.
func (c *SemesterClient) Create() *SemesterCreate {
	mutation := newSemesterMutation(c.config, OpCreate)
	return &SemesterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Semester.
func (c *SemesterClient) Update() *SemesterUpdate {
	mutation := newSemesterMutation(c.config, OpUpdate)
	return &SemesterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SemesterClient) UpdateOne(s *Semester) *SemesterUpdateOne {
	mutation := newSemesterMutation(c.config, OpUpdateOne, withSemester(s))
	return &SemesterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SemesterClient) UpdateOneID(id int) *SemesterUpdateOne {
	mutation := newSemesterMutation(c.config, OpUpdateOne, withSemesterID(id))
	return &SemesterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Semester.
func (c *SemesterClient) Delete() *SemesterDelete {
	mutation := newSemesterMutation(c.config, OpDelete)
	return &SemesterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SemesterClient) DeleteOne(s *Semester) *SemesterDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SemesterClient) DeleteOneID(id int) *SemesterDeleteOne {
	builder := c.Delete().Where(semester.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SemesterDeleteOne{builder}
}

// Create returns a query builder for Semester.
func (c *SemesterClient) Query() *SemesterQuery {
	return &SemesterQuery{config: c.config}
}

// Get returns a Semester entity by its id.
func (c *SemesterClient) Get(ctx context.Context, id int) (*Semester, error) {
	return c.Query().Where(semester.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SemesterClient) GetX(ctx context.Context, id int) *Semester {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryScholarshipRequest queries the ScholarshipRequest edge of a Semester.
func (c *SemesterClient) QueryScholarshipRequest(s *Semester) *ScholarshipRequestQuery {
	query := &ScholarshipRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(semester.Table, semester.FieldID, id),
			sqlgraph.To(scholarshiprequest.Table, scholarshiprequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, semester.ScholarshipRequestTable, semester.ScholarshipRequestColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SemesterClient) Hooks() []Hook {
	return c.hooks.Semester
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryScholarshipRequest queries the ScholarshipRequest edge of a User.
func (c *UserClient) QueryScholarshipRequest(u *User) *ScholarshipRequestQuery {
	query := &ScholarshipRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(scholarshiprequest.Table, scholarshiprequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ScholarshipRequestTable, user.ScholarshipRequestColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
