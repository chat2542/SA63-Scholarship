// Code generated by entc, DO NOT EDIT.

package scholarshipinformation

import (
	"github.com/chat2542/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ScholarshipName applies equality check predicate on the "Scholarship_name" field. It's identical to ScholarshipNameEQ.
func ScholarshipName(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameEQ applies the EQ predicate on the "Scholarship_name" field.
func ScholarshipNameEQ(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameNEQ applies the NEQ predicate on the "Scholarship_name" field.
func ScholarshipNameNEQ(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameIn applies the In predicate on the "Scholarship_name" field.
func ScholarshipNameIn(vs ...string) predicate.Scholarshipinformation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScholarshipName), v...))
	})
}

// ScholarshipNameNotIn applies the NotIn predicate on the "Scholarship_name" field.
func ScholarshipNameNotIn(vs ...string) predicate.Scholarshipinformation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScholarshipName), v...))
	})
}

// ScholarshipNameGT applies the GT predicate on the "Scholarship_name" field.
func ScholarshipNameGT(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameGTE applies the GTE predicate on the "Scholarship_name" field.
func ScholarshipNameGTE(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameLT applies the LT predicate on the "Scholarship_name" field.
func ScholarshipNameLT(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameLTE applies the LTE predicate on the "Scholarship_name" field.
func ScholarshipNameLTE(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameContains applies the Contains predicate on the "Scholarship_name" field.
func ScholarshipNameContains(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameHasPrefix applies the HasPrefix predicate on the "Scholarship_name" field.
func ScholarshipNameHasPrefix(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameHasSuffix applies the HasSuffix predicate on the "Scholarship_name" field.
func ScholarshipNameHasSuffix(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameEqualFold applies the EqualFold predicate on the "Scholarship_name" field.
func ScholarshipNameEqualFold(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldScholarshipName), v))
	})
}

// ScholarshipNameContainsFold applies the ContainsFold predicate on the "Scholarship_name" field.
func ScholarshipNameContainsFold(v string) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldScholarshipName), v))
	})
}

// HasScholarshiptype applies the HasEdge predicate on the "Scholarshiptype" edge.
func HasScholarshiptype() predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScholarshiptypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScholarshiptypeTable, ScholarshiptypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScholarshiptypeWith applies the HasEdge predicate on the "Scholarshiptype" edge with a given conditions (other predicates).
func HasScholarshiptypeWith(preds ...predicate.Scholarshiptype) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScholarshiptypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScholarshiptypeTable, ScholarshiptypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScholarshipRequest applies the HasEdge predicate on the "ScholarshipRequest" edge.
func HasScholarshipRequest() predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScholarshipRequestTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScholarshipRequestTable, ScholarshipRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScholarshipRequestWith applies the HasEdge predicate on the "ScholarshipRequest" edge with a given conditions (other predicates).
func HasScholarshipRequestWith(preds ...predicate.ScholarshipRequest) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScholarshipRequestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScholarshipRequestTable, ScholarshipRequestColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Scholarshipinformation) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Scholarshipinformation) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Scholarshipinformation) predicate.Scholarshipinformation {
	return predicate.Scholarshipinformation(func(s *sql.Selector) {
		p(s.Not())
	})
}
