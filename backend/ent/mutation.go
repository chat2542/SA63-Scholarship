// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/chat2542/app/ent/scholarshipinformation"
	"github.com/chat2542/app/ent/scholarshiprequest"
	"github.com/chat2542/app/ent/scholarshiptype"
	"github.com/chat2542/app/ent/semester"
	"github.com/chat2542/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeScholarshipRequest     = "ScholarshipRequest"
	TypeScholarshipinformation = "Scholarshipinformation"
	TypeScholarshiptype        = "Scholarshiptype"
	TypeSemester               = "Semester"
	TypeUser                   = "User"
)

// ScholarshipRequestMutation represents an operation that mutate the ScholarshipRequests
// nodes in the graph.
type ScholarshipRequestMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	clearedFields                  map[string]struct{}
	_User                          *int
	cleared_User                   bool
	_Scholarshiptype               *int
	cleared_Scholarshiptype        bool
	_Scholarshipinformation        *int
	cleared_Scholarshipinformation bool
	_Semester                      *int
	cleared_Semester               bool
	done                           bool
	oldValue                       func(context.Context) (*ScholarshipRequest, error)
}

var _ ent.Mutation = (*ScholarshipRequestMutation)(nil)

// scholarshiprequestOption allows to manage the mutation configuration using functional options.
type scholarshiprequestOption func(*ScholarshipRequestMutation)

// newScholarshipRequestMutation creates new mutation for $n.Name.
func newScholarshipRequestMutation(c config, op Op, opts ...scholarshiprequestOption) *ScholarshipRequestMutation {
	m := &ScholarshipRequestMutation{
		config:        c,
		op:            op,
		typ:           TypeScholarshipRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScholarshipRequestID sets the id field of the mutation.
func withScholarshipRequestID(id int) scholarshiprequestOption {
	return func(m *ScholarshipRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *ScholarshipRequest
		)
		m.oldValue = func(ctx context.Context) (*ScholarshipRequest, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ScholarshipRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScholarshipRequest sets the old ScholarshipRequest of the mutation.
func withScholarshipRequest(node *ScholarshipRequest) scholarshiprequestOption {
	return func(m *ScholarshipRequestMutation) {
		m.oldValue = func(context.Context) (*ScholarshipRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScholarshipRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScholarshipRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ScholarshipRequestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the User edge to User by id.
func (m *ScholarshipRequestMutation) SetUserID(id int) {
	m._User = &id
}

// ClearUser clears the User edge to User.
func (m *ScholarshipRequestMutation) ClearUser() {
	m.cleared_User = true
}

// UserCleared returns if the edge User was cleared.
func (m *ScholarshipRequestMutation) UserCleared() bool {
	return m.cleared_User
}

// UserID returns the User id in the mutation.
func (m *ScholarshipRequestMutation) UserID() (id int, exists bool) {
	if m._User != nil {
		return *m._User, true
	}
	return
}

// UserIDs returns the User ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ScholarshipRequestMutation) UserIDs() (ids []int) {
	if id := m._User; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "User" edge.
func (m *ScholarshipRequestMutation) ResetUser() {
	m._User = nil
	m.cleared_User = false
}

// SetScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id.
func (m *ScholarshipRequestMutation) SetScholarshiptypeID(id int) {
	m._Scholarshiptype = &id
}

// ClearScholarshiptype clears the Scholarshiptype edge to Scholarshiptype.
func (m *ScholarshipRequestMutation) ClearScholarshiptype() {
	m.cleared_Scholarshiptype = true
}

// ScholarshiptypeCleared returns if the edge Scholarshiptype was cleared.
func (m *ScholarshipRequestMutation) ScholarshiptypeCleared() bool {
	return m.cleared_Scholarshiptype
}

// ScholarshiptypeID returns the Scholarshiptype id in the mutation.
func (m *ScholarshipRequestMutation) ScholarshiptypeID() (id int, exists bool) {
	if m._Scholarshiptype != nil {
		return *m._Scholarshiptype, true
	}
	return
}

// ScholarshiptypeIDs returns the Scholarshiptype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ScholarshiptypeID instead. It exists only for internal usage by the builders.
func (m *ScholarshipRequestMutation) ScholarshiptypeIDs() (ids []int) {
	if id := m._Scholarshiptype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScholarshiptype reset all changes of the "Scholarshiptype" edge.
func (m *ScholarshipRequestMutation) ResetScholarshiptype() {
	m._Scholarshiptype = nil
	m.cleared_Scholarshiptype = false
}

// SetScholarshipinformationID sets the Scholarshipinformation edge to Scholarshipinformation by id.
func (m *ScholarshipRequestMutation) SetScholarshipinformationID(id int) {
	m._Scholarshipinformation = &id
}

// ClearScholarshipinformation clears the Scholarshipinformation edge to Scholarshipinformation.
func (m *ScholarshipRequestMutation) ClearScholarshipinformation() {
	m.cleared_Scholarshipinformation = true
}

// ScholarshipinformationCleared returns if the edge Scholarshipinformation was cleared.
func (m *ScholarshipRequestMutation) ScholarshipinformationCleared() bool {
	return m.cleared_Scholarshipinformation
}

// ScholarshipinformationID returns the Scholarshipinformation id in the mutation.
func (m *ScholarshipRequestMutation) ScholarshipinformationID() (id int, exists bool) {
	if m._Scholarshipinformation != nil {
		return *m._Scholarshipinformation, true
	}
	return
}

// ScholarshipinformationIDs returns the Scholarshipinformation ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ScholarshipinformationID instead. It exists only for internal usage by the builders.
func (m *ScholarshipRequestMutation) ScholarshipinformationIDs() (ids []int) {
	if id := m._Scholarshipinformation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScholarshipinformation reset all changes of the "Scholarshipinformation" edge.
func (m *ScholarshipRequestMutation) ResetScholarshipinformation() {
	m._Scholarshipinformation = nil
	m.cleared_Scholarshipinformation = false
}

// SetSemesterID sets the Semester edge to Semester by id.
func (m *ScholarshipRequestMutation) SetSemesterID(id int) {
	m._Semester = &id
}

// ClearSemester clears the Semester edge to Semester.
func (m *ScholarshipRequestMutation) ClearSemester() {
	m.cleared_Semester = true
}

// SemesterCleared returns if the edge Semester was cleared.
func (m *ScholarshipRequestMutation) SemesterCleared() bool {
	return m.cleared_Semester
}

// SemesterID returns the Semester id in the mutation.
func (m *ScholarshipRequestMutation) SemesterID() (id int, exists bool) {
	if m._Semester != nil {
		return *m._Semester, true
	}
	return
}

// SemesterIDs returns the Semester ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SemesterID instead. It exists only for internal usage by the builders.
func (m *ScholarshipRequestMutation) SemesterIDs() (ids []int) {
	if id := m._Semester; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSemester reset all changes of the "Semester" edge.
func (m *ScholarshipRequestMutation) ResetSemester() {
	m._Semester = nil
	m.cleared_Semester = false
}

// Op returns the operation name.
func (m *ScholarshipRequestMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ScholarshipRequest).
func (m *ScholarshipRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ScholarshipRequestMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ScholarshipRequestMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ScholarshipRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ScholarshipRequest field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ScholarshipRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ScholarshipRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ScholarshipRequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ScholarshipRequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ScholarshipRequestMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ScholarshipRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ScholarshipRequestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ScholarshipRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScholarshipRequestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ScholarshipRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ScholarshipRequestMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ScholarshipRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ScholarshipRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m._User != nil {
		edges = append(edges, scholarshiprequest.EdgeUser)
	}
	if m._Scholarshiptype != nil {
		edges = append(edges, scholarshiprequest.EdgeScholarshiptype)
	}
	if m._Scholarshipinformation != nil {
		edges = append(edges, scholarshiprequest.EdgeScholarshipinformation)
	}
	if m._Semester != nil {
		edges = append(edges, scholarshiprequest.EdgeSemester)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ScholarshipRequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scholarshiprequest.EdgeUser:
		if id := m._User; id != nil {
			return []ent.Value{*id}
		}
	case scholarshiprequest.EdgeScholarshiptype:
		if id := m._Scholarshiptype; id != nil {
			return []ent.Value{*id}
		}
	case scholarshiprequest.EdgeScholarshipinformation:
		if id := m._Scholarshipinformation; id != nil {
			return []ent.Value{*id}
		}
	case scholarshiprequest.EdgeSemester:
		if id := m._Semester; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ScholarshipRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ScholarshipRequestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ScholarshipRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleared_User {
		edges = append(edges, scholarshiprequest.EdgeUser)
	}
	if m.cleared_Scholarshiptype {
		edges = append(edges, scholarshiprequest.EdgeScholarshiptype)
	}
	if m.cleared_Scholarshipinformation {
		edges = append(edges, scholarshiprequest.EdgeScholarshipinformation)
	}
	if m.cleared_Semester {
		edges = append(edges, scholarshiprequest.EdgeSemester)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ScholarshipRequestMutation) EdgeCleared(name string) bool {
	switch name {
	case scholarshiprequest.EdgeUser:
		return m.cleared_User
	case scholarshiprequest.EdgeScholarshiptype:
		return m.cleared_Scholarshiptype
	case scholarshiprequest.EdgeScholarshipinformation:
		return m.cleared_Scholarshipinformation
	case scholarshiprequest.EdgeSemester:
		return m.cleared_Semester
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ScholarshipRequestMutation) ClearEdge(name string) error {
	switch name {
	case scholarshiprequest.EdgeUser:
		m.ClearUser()
		return nil
	case scholarshiprequest.EdgeScholarshiptype:
		m.ClearScholarshiptype()
		return nil
	case scholarshiprequest.EdgeScholarshipinformation:
		m.ClearScholarshipinformation()
		return nil
	case scholarshiprequest.EdgeSemester:
		m.ClearSemester()
		return nil
	}
	return fmt.Errorf("unknown ScholarshipRequest unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ScholarshipRequestMutation) ResetEdge(name string) error {
	switch name {
	case scholarshiprequest.EdgeUser:
		m.ResetUser()
		return nil
	case scholarshiprequest.EdgeScholarshiptype:
		m.ResetScholarshiptype()
		return nil
	case scholarshiprequest.EdgeScholarshipinformation:
		m.ResetScholarshipinformation()
		return nil
	case scholarshiprequest.EdgeSemester:
		m.ResetSemester()
		return nil
	}
	return fmt.Errorf("unknown ScholarshipRequest edge %s", name)
}

// ScholarshipinformationMutation represents an operation that mutate the Scholarshipinformations
// nodes in the graph.
type ScholarshipinformationMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	_Scholarship_name          *string
	clearedFields              map[string]struct{}
	_Scholarshiptype           *int
	cleared_Scholarshiptype    bool
	_ScholarshipRequest        map[int]struct{}
	removed_ScholarshipRequest map[int]struct{}
	done                       bool
	oldValue                   func(context.Context) (*Scholarshipinformation, error)
}

var _ ent.Mutation = (*ScholarshipinformationMutation)(nil)

// scholarshipinformationOption allows to manage the mutation configuration using functional options.
type scholarshipinformationOption func(*ScholarshipinformationMutation)

// newScholarshipinformationMutation creates new mutation for $n.Name.
func newScholarshipinformationMutation(c config, op Op, opts ...scholarshipinformationOption) *ScholarshipinformationMutation {
	m := &ScholarshipinformationMutation{
		config:        c,
		op:            op,
		typ:           TypeScholarshipinformation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScholarshipinformationID sets the id field of the mutation.
func withScholarshipinformationID(id int) scholarshipinformationOption {
	return func(m *ScholarshipinformationMutation) {
		var (
			err   error
			once  sync.Once
			value *Scholarshipinformation
		)
		m.oldValue = func(ctx context.Context) (*Scholarshipinformation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Scholarshipinformation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScholarshipinformation sets the old Scholarshipinformation of the mutation.
func withScholarshipinformation(node *Scholarshipinformation) scholarshipinformationOption {
	return func(m *ScholarshipinformationMutation) {
		m.oldValue = func(context.Context) (*Scholarshipinformation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScholarshipinformationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScholarshipinformationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ScholarshipinformationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetScholarshipName sets the Scholarship_name field.
func (m *ScholarshipinformationMutation) SetScholarshipName(s string) {
	m._Scholarship_name = &s
}

// ScholarshipName returns the Scholarship_name value in the mutation.
func (m *ScholarshipinformationMutation) ScholarshipName() (r string, exists bool) {
	v := m._Scholarship_name
	if v == nil {
		return
	}
	return *v, true
}

// OldScholarshipName returns the old Scholarship_name value of the Scholarshipinformation.
// If the Scholarshipinformation object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ScholarshipinformationMutation) OldScholarshipName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldScholarshipName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldScholarshipName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScholarshipName: %w", err)
	}
	return oldValue.ScholarshipName, nil
}

// ResetScholarshipName reset all changes of the "Scholarship_name" field.
func (m *ScholarshipinformationMutation) ResetScholarshipName() {
	m._Scholarship_name = nil
}

// SetScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id.
func (m *ScholarshipinformationMutation) SetScholarshiptypeID(id int) {
	m._Scholarshiptype = &id
}

// ClearScholarshiptype clears the Scholarshiptype edge to Scholarshiptype.
func (m *ScholarshipinformationMutation) ClearScholarshiptype() {
	m.cleared_Scholarshiptype = true
}

// ScholarshiptypeCleared returns if the edge Scholarshiptype was cleared.
func (m *ScholarshipinformationMutation) ScholarshiptypeCleared() bool {
	return m.cleared_Scholarshiptype
}

// ScholarshiptypeID returns the Scholarshiptype id in the mutation.
func (m *ScholarshipinformationMutation) ScholarshiptypeID() (id int, exists bool) {
	if m._Scholarshiptype != nil {
		return *m._Scholarshiptype, true
	}
	return
}

// ScholarshiptypeIDs returns the Scholarshiptype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ScholarshiptypeID instead. It exists only for internal usage by the builders.
func (m *ScholarshipinformationMutation) ScholarshiptypeIDs() (ids []int) {
	if id := m._Scholarshiptype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScholarshiptype reset all changes of the "Scholarshiptype" edge.
func (m *ScholarshipinformationMutation) ResetScholarshiptype() {
	m._Scholarshiptype = nil
	m.cleared_Scholarshiptype = false
}

// AddScholarshipRequestIDs adds the ScholarshipRequest edge to ScholarshipRequest by ids.
func (m *ScholarshipinformationMutation) AddScholarshipRequestIDs(ids ...int) {
	if m._ScholarshipRequest == nil {
		m._ScholarshipRequest = make(map[int]struct{})
	}
	for i := range ids {
		m._ScholarshipRequest[ids[i]] = struct{}{}
	}
}

// RemoveScholarshipRequestIDs removes the ScholarshipRequest edge to ScholarshipRequest by ids.
func (m *ScholarshipinformationMutation) RemoveScholarshipRequestIDs(ids ...int) {
	if m.removed_ScholarshipRequest == nil {
		m.removed_ScholarshipRequest = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_ScholarshipRequest[ids[i]] = struct{}{}
	}
}

// RemovedScholarshipRequest returns the removed ids of ScholarshipRequest.
func (m *ScholarshipinformationMutation) RemovedScholarshipRequestIDs() (ids []int) {
	for id := range m.removed_ScholarshipRequest {
		ids = append(ids, id)
	}
	return
}

// ScholarshipRequestIDs returns the ScholarshipRequest ids in the mutation.
func (m *ScholarshipinformationMutation) ScholarshipRequestIDs() (ids []int) {
	for id := range m._ScholarshipRequest {
		ids = append(ids, id)
	}
	return
}

// ResetScholarshipRequest reset all changes of the "ScholarshipRequest" edge.
func (m *ScholarshipinformationMutation) ResetScholarshipRequest() {
	m._ScholarshipRequest = nil
	m.removed_ScholarshipRequest = nil
}

// Op returns the operation name.
func (m *ScholarshipinformationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Scholarshipinformation).
func (m *ScholarshipinformationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ScholarshipinformationMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Scholarship_name != nil {
		fields = append(fields, scholarshipinformation.FieldScholarshipName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ScholarshipinformationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scholarshipinformation.FieldScholarshipName:
		return m.ScholarshipName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ScholarshipinformationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scholarshipinformation.FieldScholarshipName:
		return m.OldScholarshipName(ctx)
	}
	return nil, fmt.Errorf("unknown Scholarshipinformation field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ScholarshipinformationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scholarshipinformation.FieldScholarshipName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScholarshipName(v)
		return nil
	}
	return fmt.Errorf("unknown Scholarshipinformation field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ScholarshipinformationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ScholarshipinformationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ScholarshipinformationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Scholarshipinformation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ScholarshipinformationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ScholarshipinformationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScholarshipinformationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Scholarshipinformation nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ScholarshipinformationMutation) ResetField(name string) error {
	switch name {
	case scholarshipinformation.FieldScholarshipName:
		m.ResetScholarshipName()
		return nil
	}
	return fmt.Errorf("unknown Scholarshipinformation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ScholarshipinformationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._Scholarshiptype != nil {
		edges = append(edges, scholarshipinformation.EdgeScholarshiptype)
	}
	if m._ScholarshipRequest != nil {
		edges = append(edges, scholarshipinformation.EdgeScholarshipRequest)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ScholarshipinformationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scholarshipinformation.EdgeScholarshiptype:
		if id := m._Scholarshiptype; id != nil {
			return []ent.Value{*id}
		}
	case scholarshipinformation.EdgeScholarshipRequest:
		ids := make([]ent.Value, 0, len(m._ScholarshipRequest))
		for id := range m._ScholarshipRequest {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ScholarshipinformationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_ScholarshipRequest != nil {
		edges = append(edges, scholarshipinformation.EdgeScholarshipRequest)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ScholarshipinformationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case scholarshipinformation.EdgeScholarshipRequest:
		ids := make([]ent.Value, 0, len(m.removed_ScholarshipRequest))
		for id := range m.removed_ScholarshipRequest {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ScholarshipinformationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_Scholarshiptype {
		edges = append(edges, scholarshipinformation.EdgeScholarshiptype)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ScholarshipinformationMutation) EdgeCleared(name string) bool {
	switch name {
	case scholarshipinformation.EdgeScholarshiptype:
		return m.cleared_Scholarshiptype
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ScholarshipinformationMutation) ClearEdge(name string) error {
	switch name {
	case scholarshipinformation.EdgeScholarshiptype:
		m.ClearScholarshiptype()
		return nil
	}
	return fmt.Errorf("unknown Scholarshipinformation unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ScholarshipinformationMutation) ResetEdge(name string) error {
	switch name {
	case scholarshipinformation.EdgeScholarshiptype:
		m.ResetScholarshiptype()
		return nil
	case scholarshipinformation.EdgeScholarshipRequest:
		m.ResetScholarshipRequest()
		return nil
	}
	return fmt.Errorf("unknown Scholarshipinformation edge %s", name)
}

// ScholarshiptypeMutation represents an operation that mutate the Scholarshiptypes
// nodes in the graph.
type ScholarshiptypeMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	_Type_name                     *string
	clearedFields                  map[string]struct{}
	_Scholarshipinformation        map[int]struct{}
	removed_Scholarshipinformation map[int]struct{}
	_ScholarshipRequest            map[int]struct{}
	removed_ScholarshipRequest     map[int]struct{}
	done                           bool
	oldValue                       func(context.Context) (*Scholarshiptype, error)
}

var _ ent.Mutation = (*ScholarshiptypeMutation)(nil)

// scholarshiptypeOption allows to manage the mutation configuration using functional options.
type scholarshiptypeOption func(*ScholarshiptypeMutation)

// newScholarshiptypeMutation creates new mutation for $n.Name.
func newScholarshiptypeMutation(c config, op Op, opts ...scholarshiptypeOption) *ScholarshiptypeMutation {
	m := &ScholarshiptypeMutation{
		config:        c,
		op:            op,
		typ:           TypeScholarshiptype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScholarshiptypeID sets the id field of the mutation.
func withScholarshiptypeID(id int) scholarshiptypeOption {
	return func(m *ScholarshiptypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Scholarshiptype
		)
		m.oldValue = func(ctx context.Context) (*Scholarshiptype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Scholarshiptype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScholarshiptype sets the old Scholarshiptype of the mutation.
func withScholarshiptype(node *Scholarshiptype) scholarshiptypeOption {
	return func(m *ScholarshiptypeMutation) {
		m.oldValue = func(context.Context) (*Scholarshiptype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScholarshiptypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScholarshiptypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ScholarshiptypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTypeName sets the Type_name field.
func (m *ScholarshiptypeMutation) SetTypeName(s string) {
	m._Type_name = &s
}

// TypeName returns the Type_name value in the mutation.
func (m *ScholarshiptypeMutation) TypeName() (r string, exists bool) {
	v := m._Type_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeName returns the old Type_name value of the Scholarshiptype.
// If the Scholarshiptype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ScholarshiptypeMutation) OldTypeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTypeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeName: %w", err)
	}
	return oldValue.TypeName, nil
}

// ResetTypeName reset all changes of the "Type_name" field.
func (m *ScholarshiptypeMutation) ResetTypeName() {
	m._Type_name = nil
}

// AddScholarshipinformationIDs adds the Scholarshipinformation edge to Scholarshipinformation by ids.
func (m *ScholarshiptypeMutation) AddScholarshipinformationIDs(ids ...int) {
	if m._Scholarshipinformation == nil {
		m._Scholarshipinformation = make(map[int]struct{})
	}
	for i := range ids {
		m._Scholarshipinformation[ids[i]] = struct{}{}
	}
}

// RemoveScholarshipinformationIDs removes the Scholarshipinformation edge to Scholarshipinformation by ids.
func (m *ScholarshiptypeMutation) RemoveScholarshipinformationIDs(ids ...int) {
	if m.removed_Scholarshipinformation == nil {
		m.removed_Scholarshipinformation = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Scholarshipinformation[ids[i]] = struct{}{}
	}
}

// RemovedScholarshipinformation returns the removed ids of Scholarshipinformation.
func (m *ScholarshiptypeMutation) RemovedScholarshipinformationIDs() (ids []int) {
	for id := range m.removed_Scholarshipinformation {
		ids = append(ids, id)
	}
	return
}

// ScholarshipinformationIDs returns the Scholarshipinformation ids in the mutation.
func (m *ScholarshiptypeMutation) ScholarshipinformationIDs() (ids []int) {
	for id := range m._Scholarshipinformation {
		ids = append(ids, id)
	}
	return
}

// ResetScholarshipinformation reset all changes of the "Scholarshipinformation" edge.
func (m *ScholarshiptypeMutation) ResetScholarshipinformation() {
	m._Scholarshipinformation = nil
	m.removed_Scholarshipinformation = nil
}

// AddScholarshipRequestIDs adds the ScholarshipRequest edge to ScholarshipRequest by ids.
func (m *ScholarshiptypeMutation) AddScholarshipRequestIDs(ids ...int) {
	if m._ScholarshipRequest == nil {
		m._ScholarshipRequest = make(map[int]struct{})
	}
	for i := range ids {
		m._ScholarshipRequest[ids[i]] = struct{}{}
	}
}

// RemoveScholarshipRequestIDs removes the ScholarshipRequest edge to ScholarshipRequest by ids.
func (m *ScholarshiptypeMutation) RemoveScholarshipRequestIDs(ids ...int) {
	if m.removed_ScholarshipRequest == nil {
		m.removed_ScholarshipRequest = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_ScholarshipRequest[ids[i]] = struct{}{}
	}
}

// RemovedScholarshipRequest returns the removed ids of ScholarshipRequest.
func (m *ScholarshiptypeMutation) RemovedScholarshipRequestIDs() (ids []int) {
	for id := range m.removed_ScholarshipRequest {
		ids = append(ids, id)
	}
	return
}

// ScholarshipRequestIDs returns the ScholarshipRequest ids in the mutation.
func (m *ScholarshiptypeMutation) ScholarshipRequestIDs() (ids []int) {
	for id := range m._ScholarshipRequest {
		ids = append(ids, id)
	}
	return
}

// ResetScholarshipRequest reset all changes of the "ScholarshipRequest" edge.
func (m *ScholarshiptypeMutation) ResetScholarshipRequest() {
	m._ScholarshipRequest = nil
	m.removed_ScholarshipRequest = nil
}

// Op returns the operation name.
func (m *ScholarshiptypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Scholarshiptype).
func (m *ScholarshiptypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ScholarshiptypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Type_name != nil {
		fields = append(fields, scholarshiptype.FieldTypeName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ScholarshiptypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scholarshiptype.FieldTypeName:
		return m.TypeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ScholarshiptypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scholarshiptype.FieldTypeName:
		return m.OldTypeName(ctx)
	}
	return nil, fmt.Errorf("unknown Scholarshiptype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ScholarshiptypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scholarshiptype.FieldTypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeName(v)
		return nil
	}
	return fmt.Errorf("unknown Scholarshiptype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ScholarshiptypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ScholarshiptypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ScholarshiptypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Scholarshiptype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ScholarshiptypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ScholarshiptypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScholarshiptypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Scholarshiptype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ScholarshiptypeMutation) ResetField(name string) error {
	switch name {
	case scholarshiptype.FieldTypeName:
		m.ResetTypeName()
		return nil
	}
	return fmt.Errorf("unknown Scholarshiptype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ScholarshiptypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._Scholarshipinformation != nil {
		edges = append(edges, scholarshiptype.EdgeScholarshipinformation)
	}
	if m._ScholarshipRequest != nil {
		edges = append(edges, scholarshiptype.EdgeScholarshipRequest)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ScholarshiptypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scholarshiptype.EdgeScholarshipinformation:
		ids := make([]ent.Value, 0, len(m._Scholarshipinformation))
		for id := range m._Scholarshipinformation {
			ids = append(ids, id)
		}
		return ids
	case scholarshiptype.EdgeScholarshipRequest:
		ids := make([]ent.Value, 0, len(m._ScholarshipRequest))
		for id := range m._ScholarshipRequest {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ScholarshiptypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_Scholarshipinformation != nil {
		edges = append(edges, scholarshiptype.EdgeScholarshipinformation)
	}
	if m.removed_ScholarshipRequest != nil {
		edges = append(edges, scholarshiptype.EdgeScholarshipRequest)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ScholarshiptypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case scholarshiptype.EdgeScholarshipinformation:
		ids := make([]ent.Value, 0, len(m.removed_Scholarshipinformation))
		for id := range m.removed_Scholarshipinformation {
			ids = append(ids, id)
		}
		return ids
	case scholarshiptype.EdgeScholarshipRequest:
		ids := make([]ent.Value, 0, len(m.removed_ScholarshipRequest))
		for id := range m.removed_ScholarshipRequest {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ScholarshiptypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ScholarshiptypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ScholarshiptypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Scholarshiptype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ScholarshiptypeMutation) ResetEdge(name string) error {
	switch name {
	case scholarshiptype.EdgeScholarshipinformation:
		m.ResetScholarshipinformation()
		return nil
	case scholarshiptype.EdgeScholarshipRequest:
		m.ResetScholarshipRequest()
		return nil
	}
	return fmt.Errorf("unknown Scholarshiptype edge %s", name)
}

// SemesterMutation represents an operation that mutate the Semesters
// nodes in the graph.
type SemesterMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	_Semester                  *string
	clearedFields              map[string]struct{}
	_ScholarshipRequest        map[int]struct{}
	removed_ScholarshipRequest map[int]struct{}
	done                       bool
	oldValue                   func(context.Context) (*Semester, error)
}

var _ ent.Mutation = (*SemesterMutation)(nil)

// semesterOption allows to manage the mutation configuration using functional options.
type semesterOption func(*SemesterMutation)

// newSemesterMutation creates new mutation for $n.Name.
func newSemesterMutation(c config, op Op, opts ...semesterOption) *SemesterMutation {
	m := &SemesterMutation{
		config:        c,
		op:            op,
		typ:           TypeSemester,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSemesterID sets the id field of the mutation.
func withSemesterID(id int) semesterOption {
	return func(m *SemesterMutation) {
		var (
			err   error
			once  sync.Once
			value *Semester
		)
		m.oldValue = func(ctx context.Context) (*Semester, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Semester.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSemester sets the old Semester of the mutation.
func withSemester(node *Semester) semesterOption {
	return func(m *SemesterMutation) {
		m.oldValue = func(context.Context) (*Semester, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SemesterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SemesterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SemesterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSemester sets the Semester field.
func (m *SemesterMutation) SetSemester(s string) {
	m._Semester = &s
}

// Semester returns the Semester value in the mutation.
func (m *SemesterMutation) Semester() (r string, exists bool) {
	v := m._Semester
	if v == nil {
		return
	}
	return *v, true
}

// OldSemester returns the old Semester value of the Semester.
// If the Semester object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SemesterMutation) OldSemester(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSemester is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSemester requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSemester: %w", err)
	}
	return oldValue.Semester, nil
}

// ResetSemester reset all changes of the "Semester" field.
func (m *SemesterMutation) ResetSemester() {
	m._Semester = nil
}

// AddScholarshipRequestIDs adds the ScholarshipRequest edge to ScholarshipRequest by ids.
func (m *SemesterMutation) AddScholarshipRequestIDs(ids ...int) {
	if m._ScholarshipRequest == nil {
		m._ScholarshipRequest = make(map[int]struct{})
	}
	for i := range ids {
		m._ScholarshipRequest[ids[i]] = struct{}{}
	}
}

// RemoveScholarshipRequestIDs removes the ScholarshipRequest edge to ScholarshipRequest by ids.
func (m *SemesterMutation) RemoveScholarshipRequestIDs(ids ...int) {
	if m.removed_ScholarshipRequest == nil {
		m.removed_ScholarshipRequest = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_ScholarshipRequest[ids[i]] = struct{}{}
	}
}

// RemovedScholarshipRequest returns the removed ids of ScholarshipRequest.
func (m *SemesterMutation) RemovedScholarshipRequestIDs() (ids []int) {
	for id := range m.removed_ScholarshipRequest {
		ids = append(ids, id)
	}
	return
}

// ScholarshipRequestIDs returns the ScholarshipRequest ids in the mutation.
func (m *SemesterMutation) ScholarshipRequestIDs() (ids []int) {
	for id := range m._ScholarshipRequest {
		ids = append(ids, id)
	}
	return
}

// ResetScholarshipRequest reset all changes of the "ScholarshipRequest" edge.
func (m *SemesterMutation) ResetScholarshipRequest() {
	m._ScholarshipRequest = nil
	m.removed_ScholarshipRequest = nil
}

// Op returns the operation name.
func (m *SemesterMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Semester).
func (m *SemesterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SemesterMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Semester != nil {
		fields = append(fields, semester.FieldSemester)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SemesterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case semester.FieldSemester:
		return m.Semester()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SemesterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case semester.FieldSemester:
		return m.OldSemester(ctx)
	}
	return nil, fmt.Errorf("unknown Semester field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SemesterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case semester.FieldSemester:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSemester(v)
		return nil
	}
	return fmt.Errorf("unknown Semester field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SemesterMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SemesterMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SemesterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Semester numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SemesterMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SemesterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SemesterMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Semester nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SemesterMutation) ResetField(name string) error {
	switch name {
	case semester.FieldSemester:
		m.ResetSemester()
		return nil
	}
	return fmt.Errorf("unknown Semester field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SemesterMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._ScholarshipRequest != nil {
		edges = append(edges, semester.EdgeScholarshipRequest)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SemesterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case semester.EdgeScholarshipRequest:
		ids := make([]ent.Value, 0, len(m._ScholarshipRequest))
		for id := range m._ScholarshipRequest {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SemesterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_ScholarshipRequest != nil {
		edges = append(edges, semester.EdgeScholarshipRequest)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SemesterMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case semester.EdgeScholarshipRequest:
		ids := make([]ent.Value, 0, len(m.removed_ScholarshipRequest))
		for id := range m.removed_ScholarshipRequest {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SemesterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SemesterMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SemesterMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Semester unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SemesterMutation) ResetEdge(name string) error {
	switch name {
	case semester.EdgeScholarshipRequest:
		m.ResetScholarshipRequest()
		return nil
	}
	return fmt.Errorf("unknown Semester edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	_Email                     *string
	clearedFields              map[string]struct{}
	_ScholarshipRequest        map[int]struct{}
	removed_ScholarshipRequest map[int]struct{}
	done                       bool
	oldValue                   func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the Email field.
func (m *UserMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *UserMutation) ResetEmail() {
	m._Email = nil
}

// AddScholarshipRequestIDs adds the ScholarshipRequest edge to ScholarshipRequest by ids.
func (m *UserMutation) AddScholarshipRequestIDs(ids ...int) {
	if m._ScholarshipRequest == nil {
		m._ScholarshipRequest = make(map[int]struct{})
	}
	for i := range ids {
		m._ScholarshipRequest[ids[i]] = struct{}{}
	}
}

// RemoveScholarshipRequestIDs removes the ScholarshipRequest edge to ScholarshipRequest by ids.
func (m *UserMutation) RemoveScholarshipRequestIDs(ids ...int) {
	if m.removed_ScholarshipRequest == nil {
		m.removed_ScholarshipRequest = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_ScholarshipRequest[ids[i]] = struct{}{}
	}
}

// RemovedScholarshipRequest returns the removed ids of ScholarshipRequest.
func (m *UserMutation) RemovedScholarshipRequestIDs() (ids []int) {
	for id := range m.removed_ScholarshipRequest {
		ids = append(ids, id)
	}
	return
}

// ScholarshipRequestIDs returns the ScholarshipRequest ids in the mutation.
func (m *UserMutation) ScholarshipRequestIDs() (ids []int) {
	for id := range m._ScholarshipRequest {
		ids = append(ids, id)
	}
	return
}

// ResetScholarshipRequest reset all changes of the "ScholarshipRequest" edge.
func (m *UserMutation) ResetScholarshipRequest() {
	m._ScholarshipRequest = nil
	m.removed_ScholarshipRequest = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Email != nil {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._ScholarshipRequest != nil {
		edges = append(edges, user.EdgeScholarshipRequest)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeScholarshipRequest:
		ids := make([]ent.Value, 0, len(m._ScholarshipRequest))
		for id := range m._ScholarshipRequest {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_ScholarshipRequest != nil {
		edges = append(edges, user.EdgeScholarshipRequest)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeScholarshipRequest:
		ids := make([]ent.Value, 0, len(m.removed_ScholarshipRequest))
		for id := range m.removed_ScholarshipRequest {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeScholarshipRequest:
		m.ResetScholarshipRequest()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
