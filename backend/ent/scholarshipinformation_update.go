// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/chat2542/app/ent/predicate"
	"github.com/chat2542/app/ent/scholarshipinformation"
	"github.com/chat2542/app/ent/scholarshiprequest"
	"github.com/chat2542/app/ent/scholarshiptype"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ScholarshipinformationUpdate is the builder for updating Scholarshipinformation entities.
type ScholarshipinformationUpdate struct {
	config
	hooks      []Hook
	mutation   *ScholarshipinformationMutation
	predicates []predicate.Scholarshipinformation
}

// Where adds a new predicate for the builder.
func (su *ScholarshipinformationUpdate) Where(ps ...predicate.Scholarshipinformation) *ScholarshipinformationUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetScholarshipName sets the Scholarship_name field.
func (su *ScholarshipinformationUpdate) SetScholarshipName(s string) *ScholarshipinformationUpdate {
	su.mutation.SetScholarshipName(s)
	return su
}

// SetScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id.
func (su *ScholarshipinformationUpdate) SetScholarshiptypeID(id int) *ScholarshipinformationUpdate {
	su.mutation.SetScholarshiptypeID(id)
	return su
}

// SetNillableScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id if the given value is not nil.
func (su *ScholarshipinformationUpdate) SetNillableScholarshiptypeID(id *int) *ScholarshipinformationUpdate {
	if id != nil {
		su = su.SetScholarshiptypeID(*id)
	}
	return su
}

// SetScholarshiptype sets the Scholarshiptype edge to Scholarshiptype.
func (su *ScholarshipinformationUpdate) SetScholarshiptype(s *Scholarshiptype) *ScholarshipinformationUpdate {
	return su.SetScholarshiptypeID(s.ID)
}

// AddScholarshipRequestIDs adds the ScholarshipRequest edge to ScholarshipRequest by ids.
func (su *ScholarshipinformationUpdate) AddScholarshipRequestIDs(ids ...int) *ScholarshipinformationUpdate {
	su.mutation.AddScholarshipRequestIDs(ids...)
	return su
}

// AddScholarshipRequest adds the ScholarshipRequest edges to ScholarshipRequest.
func (su *ScholarshipinformationUpdate) AddScholarshipRequest(s ...*ScholarshipRequest) *ScholarshipinformationUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddScholarshipRequestIDs(ids...)
}

// Mutation returns the ScholarshipinformationMutation object of the builder.
func (su *ScholarshipinformationUpdate) Mutation() *ScholarshipinformationMutation {
	return su.mutation
}

// ClearScholarshiptype clears the Scholarshiptype edge to Scholarshiptype.
func (su *ScholarshipinformationUpdate) ClearScholarshiptype() *ScholarshipinformationUpdate {
	su.mutation.ClearScholarshiptype()
	return su
}

// RemoveScholarshipRequestIDs removes the ScholarshipRequest edge to ScholarshipRequest by ids.
func (su *ScholarshipinformationUpdate) RemoveScholarshipRequestIDs(ids ...int) *ScholarshipinformationUpdate {
	su.mutation.RemoveScholarshipRequestIDs(ids...)
	return su
}

// RemoveScholarshipRequest removes ScholarshipRequest edges to ScholarshipRequest.
func (su *ScholarshipinformationUpdate) RemoveScholarshipRequest(s ...*ScholarshipRequest) *ScholarshipinformationUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveScholarshipRequestIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *ScholarshipinformationUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.ScholarshipName(); ok {
		if err := scholarshipinformation.ScholarshipNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "Scholarship_name", err: fmt.Errorf("ent: validator failed for field \"Scholarship_name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipinformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScholarshipinformationUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScholarshipinformationUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScholarshipinformationUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScholarshipinformationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scholarshipinformation.Table,
			Columns: scholarshipinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarshipinformation.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.ScholarshipName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarshipinformation.FieldScholarshipName,
		})
	}
	if su.mutation.ScholarshiptypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshipinformation.ScholarshiptypeTable,
			Columns: []string{scholarshipinformation.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ScholarshiptypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshipinformation.ScholarshiptypeTable,
			Columns: []string{scholarshipinformation.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedScholarshipRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scholarshipinformation.ScholarshipRequestTable,
			Columns: []string{scholarshipinformation.ScholarshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiprequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ScholarshipRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scholarshipinformation.ScholarshipRequestTable,
			Columns: []string{scholarshipinformation.ScholarshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiprequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scholarshipinformation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ScholarshipinformationUpdateOne is the builder for updating a single Scholarshipinformation entity.
type ScholarshipinformationUpdateOne struct {
	config
	hooks    []Hook
	mutation *ScholarshipinformationMutation
}

// SetScholarshipName sets the Scholarship_name field.
func (suo *ScholarshipinformationUpdateOne) SetScholarshipName(s string) *ScholarshipinformationUpdateOne {
	suo.mutation.SetScholarshipName(s)
	return suo
}

// SetScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id.
func (suo *ScholarshipinformationUpdateOne) SetScholarshiptypeID(id int) *ScholarshipinformationUpdateOne {
	suo.mutation.SetScholarshiptypeID(id)
	return suo
}

// SetNillableScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id if the given value is not nil.
func (suo *ScholarshipinformationUpdateOne) SetNillableScholarshiptypeID(id *int) *ScholarshipinformationUpdateOne {
	if id != nil {
		suo = suo.SetScholarshiptypeID(*id)
	}
	return suo
}

// SetScholarshiptype sets the Scholarshiptype edge to Scholarshiptype.
func (suo *ScholarshipinformationUpdateOne) SetScholarshiptype(s *Scholarshiptype) *ScholarshipinformationUpdateOne {
	return suo.SetScholarshiptypeID(s.ID)
}

// AddScholarshipRequestIDs adds the ScholarshipRequest edge to ScholarshipRequest by ids.
func (suo *ScholarshipinformationUpdateOne) AddScholarshipRequestIDs(ids ...int) *ScholarshipinformationUpdateOne {
	suo.mutation.AddScholarshipRequestIDs(ids...)
	return suo
}

// AddScholarshipRequest adds the ScholarshipRequest edges to ScholarshipRequest.
func (suo *ScholarshipinformationUpdateOne) AddScholarshipRequest(s ...*ScholarshipRequest) *ScholarshipinformationUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddScholarshipRequestIDs(ids...)
}

// Mutation returns the ScholarshipinformationMutation object of the builder.
func (suo *ScholarshipinformationUpdateOne) Mutation() *ScholarshipinformationMutation {
	return suo.mutation
}

// ClearScholarshiptype clears the Scholarshiptype edge to Scholarshiptype.
func (suo *ScholarshipinformationUpdateOne) ClearScholarshiptype() *ScholarshipinformationUpdateOne {
	suo.mutation.ClearScholarshiptype()
	return suo
}

// RemoveScholarshipRequestIDs removes the ScholarshipRequest edge to ScholarshipRequest by ids.
func (suo *ScholarshipinformationUpdateOne) RemoveScholarshipRequestIDs(ids ...int) *ScholarshipinformationUpdateOne {
	suo.mutation.RemoveScholarshipRequestIDs(ids...)
	return suo
}

// RemoveScholarshipRequest removes ScholarshipRequest edges to ScholarshipRequest.
func (suo *ScholarshipinformationUpdateOne) RemoveScholarshipRequest(s ...*ScholarshipRequest) *ScholarshipinformationUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveScholarshipRequestIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *ScholarshipinformationUpdateOne) Save(ctx context.Context) (*Scholarshipinformation, error) {
	if v, ok := suo.mutation.ScholarshipName(); ok {
		if err := scholarshipinformation.ScholarshipNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Scholarship_name", err: fmt.Errorf("ent: validator failed for field \"Scholarship_name\": %w", err)}
		}
	}

	var (
		err  error
		node *Scholarshipinformation
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipinformationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScholarshipinformationUpdateOne) SaveX(ctx context.Context) *Scholarshipinformation {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *ScholarshipinformationUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScholarshipinformationUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScholarshipinformationUpdateOne) sqlSave(ctx context.Context) (s *Scholarshipinformation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scholarshipinformation.Table,
			Columns: scholarshipinformation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarshipinformation.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Scholarshipinformation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.ScholarshipName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarshipinformation.FieldScholarshipName,
		})
	}
	if suo.mutation.ScholarshiptypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshipinformation.ScholarshiptypeTable,
			Columns: []string{scholarshipinformation.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ScholarshiptypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshipinformation.ScholarshiptypeTable,
			Columns: []string{scholarshipinformation.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedScholarshipRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scholarshipinformation.ScholarshipRequestTable,
			Columns: []string{scholarshipinformation.ScholarshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiprequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ScholarshipRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scholarshipinformation.ScholarshipRequestTable,
			Columns: []string{scholarshipinformation.ScholarshipRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiprequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Scholarshipinformation{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scholarshipinformation.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
