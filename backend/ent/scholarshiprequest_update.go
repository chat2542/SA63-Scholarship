// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/chat2542/app/ent/predicate"
	"github.com/chat2542/app/ent/scholarshipinformation"
	"github.com/chat2542/app/ent/scholarshiprequest"
	"github.com/chat2542/app/ent/scholarshiptype"
	"github.com/chat2542/app/ent/semester"
	"github.com/chat2542/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ScholarshipRequestUpdate is the builder for updating ScholarshipRequest entities.
type ScholarshipRequestUpdate struct {
	config
	hooks      []Hook
	mutation   *ScholarshipRequestMutation
	predicates []predicate.ScholarshipRequest
}

// Where adds a new predicate for the builder.
func (sru *ScholarshipRequestUpdate) Where(ps ...predicate.ScholarshipRequest) *ScholarshipRequestUpdate {
	sru.predicates = append(sru.predicates, ps...)
	return sru
}

// SetUserID sets the User edge to User by id.
func (sru *ScholarshipRequestUpdate) SetUserID(id int) *ScholarshipRequestUpdate {
	sru.mutation.SetUserID(id)
	return sru
}

// SetNillableUserID sets the User edge to User by id if the given value is not nil.
func (sru *ScholarshipRequestUpdate) SetNillableUserID(id *int) *ScholarshipRequestUpdate {
	if id != nil {
		sru = sru.SetUserID(*id)
	}
	return sru
}

// SetUser sets the User edge to User.
func (sru *ScholarshipRequestUpdate) SetUser(u *User) *ScholarshipRequestUpdate {
	return sru.SetUserID(u.ID)
}

// SetScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id.
func (sru *ScholarshipRequestUpdate) SetScholarshiptypeID(id int) *ScholarshipRequestUpdate {
	sru.mutation.SetScholarshiptypeID(id)
	return sru
}

// SetNillableScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id if the given value is not nil.
func (sru *ScholarshipRequestUpdate) SetNillableScholarshiptypeID(id *int) *ScholarshipRequestUpdate {
	if id != nil {
		sru = sru.SetScholarshiptypeID(*id)
	}
	return sru
}

// SetScholarshiptype sets the Scholarshiptype edge to Scholarshiptype.
func (sru *ScholarshipRequestUpdate) SetScholarshiptype(s *Scholarshiptype) *ScholarshipRequestUpdate {
	return sru.SetScholarshiptypeID(s.ID)
}

// SetScholarshipinformationID sets the Scholarshipinformation edge to Scholarshipinformation by id.
func (sru *ScholarshipRequestUpdate) SetScholarshipinformationID(id int) *ScholarshipRequestUpdate {
	sru.mutation.SetScholarshipinformationID(id)
	return sru
}

// SetNillableScholarshipinformationID sets the Scholarshipinformation edge to Scholarshipinformation by id if the given value is not nil.
func (sru *ScholarshipRequestUpdate) SetNillableScholarshipinformationID(id *int) *ScholarshipRequestUpdate {
	if id != nil {
		sru = sru.SetScholarshipinformationID(*id)
	}
	return sru
}

// SetScholarshipinformation sets the Scholarshipinformation edge to Scholarshipinformation.
func (sru *ScholarshipRequestUpdate) SetScholarshipinformation(s *Scholarshipinformation) *ScholarshipRequestUpdate {
	return sru.SetScholarshipinformationID(s.ID)
}

// SetSemesterID sets the Semester edge to Semester by id.
func (sru *ScholarshipRequestUpdate) SetSemesterID(id int) *ScholarshipRequestUpdate {
	sru.mutation.SetSemesterID(id)
	return sru
}

// SetNillableSemesterID sets the Semester edge to Semester by id if the given value is not nil.
func (sru *ScholarshipRequestUpdate) SetNillableSemesterID(id *int) *ScholarshipRequestUpdate {
	if id != nil {
		sru = sru.SetSemesterID(*id)
	}
	return sru
}

// SetSemester sets the Semester edge to Semester.
func (sru *ScholarshipRequestUpdate) SetSemester(s *Semester) *ScholarshipRequestUpdate {
	return sru.SetSemesterID(s.ID)
}

// Mutation returns the ScholarshipRequestMutation object of the builder.
func (sru *ScholarshipRequestUpdate) Mutation() *ScholarshipRequestMutation {
	return sru.mutation
}

// ClearUser clears the User edge to User.
func (sru *ScholarshipRequestUpdate) ClearUser() *ScholarshipRequestUpdate {
	sru.mutation.ClearUser()
	return sru
}

// ClearScholarshiptype clears the Scholarshiptype edge to Scholarshiptype.
func (sru *ScholarshipRequestUpdate) ClearScholarshiptype() *ScholarshipRequestUpdate {
	sru.mutation.ClearScholarshiptype()
	return sru
}

// ClearScholarshipinformation clears the Scholarshipinformation edge to Scholarshipinformation.
func (sru *ScholarshipRequestUpdate) ClearScholarshipinformation() *ScholarshipRequestUpdate {
	sru.mutation.ClearScholarshipinformation()
	return sru
}

// ClearSemester clears the Semester edge to Semester.
func (sru *ScholarshipRequestUpdate) ClearSemester() *ScholarshipRequestUpdate {
	sru.mutation.ClearSemester()
	return sru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (sru *ScholarshipRequestUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(sru.hooks) == 0 {
		affected, err = sru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sru.mutation = mutation
			affected, err = sru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sru.hooks) - 1; i >= 0; i-- {
			mut = sru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sru *ScholarshipRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *ScholarshipRequestUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *ScholarshipRequestUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sru *ScholarshipRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scholarshiprequest.Table,
			Columns: scholarshiprequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarshiprequest.FieldID,
			},
		},
	}
	if ps := sru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.UserTable,
			Columns: []string{scholarshiprequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.UserTable,
			Columns: []string{scholarshiprequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.ScholarshiptypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshiptypeTable,
			Columns: []string{scholarshiprequest.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ScholarshiptypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshiptypeTable,
			Columns: []string{scholarshiprequest.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.ScholarshipinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshipinformationTable,
			Columns: []string{scholarshiprequest.ScholarshipinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshipinformation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ScholarshipinformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshipinformationTable,
			Columns: []string{scholarshiprequest.ScholarshipinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshipinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.SemesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.SemesterTable,
			Columns: []string{scholarshiprequest.SemesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SemesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.SemesterTable,
			Columns: []string{scholarshiprequest.SemesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scholarshiprequest.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ScholarshipRequestUpdateOne is the builder for updating a single ScholarshipRequest entity.
type ScholarshipRequestUpdateOne struct {
	config
	hooks    []Hook
	mutation *ScholarshipRequestMutation
}

// SetUserID sets the User edge to User by id.
func (sruo *ScholarshipRequestUpdateOne) SetUserID(id int) *ScholarshipRequestUpdateOne {
	sruo.mutation.SetUserID(id)
	return sruo
}

// SetNillableUserID sets the User edge to User by id if the given value is not nil.
func (sruo *ScholarshipRequestUpdateOne) SetNillableUserID(id *int) *ScholarshipRequestUpdateOne {
	if id != nil {
		sruo = sruo.SetUserID(*id)
	}
	return sruo
}

// SetUser sets the User edge to User.
func (sruo *ScholarshipRequestUpdateOne) SetUser(u *User) *ScholarshipRequestUpdateOne {
	return sruo.SetUserID(u.ID)
}

// SetScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id.
func (sruo *ScholarshipRequestUpdateOne) SetScholarshiptypeID(id int) *ScholarshipRequestUpdateOne {
	sruo.mutation.SetScholarshiptypeID(id)
	return sruo
}

// SetNillableScholarshiptypeID sets the Scholarshiptype edge to Scholarshiptype by id if the given value is not nil.
func (sruo *ScholarshipRequestUpdateOne) SetNillableScholarshiptypeID(id *int) *ScholarshipRequestUpdateOne {
	if id != nil {
		sruo = sruo.SetScholarshiptypeID(*id)
	}
	return sruo
}

// SetScholarshiptype sets the Scholarshiptype edge to Scholarshiptype.
func (sruo *ScholarshipRequestUpdateOne) SetScholarshiptype(s *Scholarshiptype) *ScholarshipRequestUpdateOne {
	return sruo.SetScholarshiptypeID(s.ID)
}

// SetScholarshipinformationID sets the Scholarshipinformation edge to Scholarshipinformation by id.
func (sruo *ScholarshipRequestUpdateOne) SetScholarshipinformationID(id int) *ScholarshipRequestUpdateOne {
	sruo.mutation.SetScholarshipinformationID(id)
	return sruo
}

// SetNillableScholarshipinformationID sets the Scholarshipinformation edge to Scholarshipinformation by id if the given value is not nil.
func (sruo *ScholarshipRequestUpdateOne) SetNillableScholarshipinformationID(id *int) *ScholarshipRequestUpdateOne {
	if id != nil {
		sruo = sruo.SetScholarshipinformationID(*id)
	}
	return sruo
}

// SetScholarshipinformation sets the Scholarshipinformation edge to Scholarshipinformation.
func (sruo *ScholarshipRequestUpdateOne) SetScholarshipinformation(s *Scholarshipinformation) *ScholarshipRequestUpdateOne {
	return sruo.SetScholarshipinformationID(s.ID)
}

// SetSemesterID sets the Semester edge to Semester by id.
func (sruo *ScholarshipRequestUpdateOne) SetSemesterID(id int) *ScholarshipRequestUpdateOne {
	sruo.mutation.SetSemesterID(id)
	return sruo
}

// SetNillableSemesterID sets the Semester edge to Semester by id if the given value is not nil.
func (sruo *ScholarshipRequestUpdateOne) SetNillableSemesterID(id *int) *ScholarshipRequestUpdateOne {
	if id != nil {
		sruo = sruo.SetSemesterID(*id)
	}
	return sruo
}

// SetSemester sets the Semester edge to Semester.
func (sruo *ScholarshipRequestUpdateOne) SetSemester(s *Semester) *ScholarshipRequestUpdateOne {
	return sruo.SetSemesterID(s.ID)
}

// Mutation returns the ScholarshipRequestMutation object of the builder.
func (sruo *ScholarshipRequestUpdateOne) Mutation() *ScholarshipRequestMutation {
	return sruo.mutation
}

// ClearUser clears the User edge to User.
func (sruo *ScholarshipRequestUpdateOne) ClearUser() *ScholarshipRequestUpdateOne {
	sruo.mutation.ClearUser()
	return sruo
}

// ClearScholarshiptype clears the Scholarshiptype edge to Scholarshiptype.
func (sruo *ScholarshipRequestUpdateOne) ClearScholarshiptype() *ScholarshipRequestUpdateOne {
	sruo.mutation.ClearScholarshiptype()
	return sruo
}

// ClearScholarshipinformation clears the Scholarshipinformation edge to Scholarshipinformation.
func (sruo *ScholarshipRequestUpdateOne) ClearScholarshipinformation() *ScholarshipRequestUpdateOne {
	sruo.mutation.ClearScholarshipinformation()
	return sruo
}

// ClearSemester clears the Semester edge to Semester.
func (sruo *ScholarshipRequestUpdateOne) ClearSemester() *ScholarshipRequestUpdateOne {
	sruo.mutation.ClearSemester()
	return sruo
}

// Save executes the query and returns the updated entity.
func (sruo *ScholarshipRequestUpdateOne) Save(ctx context.Context) (*ScholarshipRequest, error) {

	var (
		err  error
		node *ScholarshipRequest
	)
	if len(sruo.hooks) == 0 {
		node, err = sruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sruo.mutation = mutation
			node, err = sruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sruo.hooks) - 1; i >= 0; i-- {
			mut = sruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *ScholarshipRequestUpdateOne) SaveX(ctx context.Context) *ScholarshipRequest {
	sr, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return sr
}

// Exec executes the query on the entity.
func (sruo *ScholarshipRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *ScholarshipRequestUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruo *ScholarshipRequestUpdateOne) sqlSave(ctx context.Context) (sr *ScholarshipRequest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scholarshiprequest.Table,
			Columns: scholarshiprequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarshiprequest.FieldID,
			},
		},
	}
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ScholarshipRequest.ID for update")}
	}
	_spec.Node.ID.Value = id
	if sruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.UserTable,
			Columns: []string{scholarshiprequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.UserTable,
			Columns: []string{scholarshiprequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.ScholarshiptypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshiptypeTable,
			Columns: []string{scholarshiprequest.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ScholarshiptypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshiptypeTable,
			Columns: []string{scholarshiprequest.ScholarshiptypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.ScholarshipinformationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshipinformationTable,
			Columns: []string{scholarshiprequest.ScholarshipinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshipinformation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ScholarshipinformationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.ScholarshipinformationTable,
			Columns: []string{scholarshiprequest.ScholarshipinformationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshipinformation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.SemesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.SemesterTable,
			Columns: []string{scholarshiprequest.SemesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SemesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarshiprequest.SemesterTable,
			Columns: []string{scholarshiprequest.SemesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	sr = &ScholarshipRequest{config: sruo.config}
	_spec.Assign = sr.assignValues
	_spec.ScanValues = sr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scholarshiprequest.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return sr, nil
}
